library(shiny)
library(mathjaxr)
######## Function to generate multiple dynamic lines
generate_dynamic_lines <- function(dynamics, texts) {
lines <- lapply(seq_along(dynamics), function(i) {
fluidRow(
column(10, tags$p(HTML(texts[i]))),
column(2, textOutput(dynamics[i]))
)
})
return(do.call(tagList, lines))
}
######## Function to generate lines with equations and text
generate_text_with_equation <- function(equations, paragraphs) {
report_html <- tags$div()
for (i in seq_along(equations)) {
text_html <- HTML(paragraphs[i])
equation_html <- withMathJax(equations[i])
report_html <- tagAppendChild(report_html, tags$p(text_html))
report_html <- tagAppendChild(report_html, tags$p(equation_html))
}
return(report_html)
}
######### Function to generate equations and text in the same line inside a table
generate_text_with_equation_1 <- function(equations2, paragraphs2) {
report_html <- tags$div()
table_html <- tags$table(
lapply(seq_along(equations2), function(i) {
equation_html <- withMathJax(equations2[i])
text_html <- HTML(paragraphs2[i])
tags$tr(
tags$td(equation_html, style = "padding-right: 20px;"),
tags$td(text_html)
)
})
)
report_html <- tagAppendChild(report_html, table_html)
return(report_html)
}
######################################################### Start UI
ui <- fluidPage(
tags$head(
############ Define the output style
tags$style(HTML("
body {
background-color: #f0f0f0;
}
")),
tags$script(src = "https://polyfill.io/v3/polyfill.min.js?features=es6"),
tags$script(id = "MathJax-script", async = TRUE, src = "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js")
),
navbarPage(
"SAMPLE X",
################# Menu for simple random sampling
shiny::navbarMenu("Simple Random Sampling",
shiny::tabPanel("The Mean", id = "M"),
shiny::tabPanel("A Proportion", id = "P"),
shiny::tabPanel("The Total", id = "T")
),
sidebarLayout(
sidebarPanel(
id = "sidebar_SRS",
selectInput("Type", label = "Sampling type", choices = c("Infinite Population", "Finite Population")),
conditionalPanel(
'input.Type == "Finite Population"',
numericInput(inputId = "N", label = "Population size:", value = 100, min = 1)
),
numericInput(inputId = "Confidence", label = "Confidence", value = 95, min = 0, max = 100, step = 1),
numericInput(inputId = "Variance", label = "Variance:", value = 10, min = 0),
numericInput(inputId = "Precision", label = "Precision:", value = 1, min = 0, max = 100, step = 1)
),
mainPanel(
tabsetPanel(
tabPanel("Sampling Plan", uiOutput("summary")),
tabPanel("Equation", uiOutput("equa")),
tabPanel("Additional Information", uiOutput("inform")),
tabPanel("Example", uiOutput("example"))
)
)
),
shiny::navbarMenu("Stratified Sampling"),
shiny::navbarMenu("Cluster Sampling")
)
)
################################################# Start server section
server <- function(input, output, session) {
################################################ Start simple random sampling
############ Start summary
output$summary <- renderUI({
output$pop_size_value <- renderText({ input$N })
output$conf_value <- renderText({ input$Confidence })
output$prec_value <- renderText({ input$Precision })
output$var_value <- renderText({ input$Variance })
confidence <- input$Confidence
precision <- input$Precision
variance <- input$Variance
alpha2 <- (1 - confidence / 100) / 2
z <- qnorm(alpha2, lower.tail = FALSE)
n0 <- variance * (z^2) / (precision^2)
if (input$Type == "Infinite Population") {
ni <- ceiling(n0)
output$ni_value <- renderText(ni)
texts <- c(
"Confidence level = ",
"The absolute precision =",
"The estimated value of the variance of the studied characteristic = ",
"The estimated sample size = "
)
title <- "Sample size for infinite populations"
dynamics <- c("conf_value", "prec_value", "var_value", "ni_value")
refe <- c("Reference: Gómez Aguilar, Roberto. 1979. Introduction to Sampling.")
P1 <- generate_dynamic_lines(dynamics, texts)
report_f_html <- tags$div()
title_html <- tags$h3(title)
report_f_html <- tagAppendChild(report_f_html, title_html)
report_f_html <- tagAppendChild(report_f_html, P1)
return(report_f_html)
} else {
N <- input$N
ni <- ceiling(n0 / (1 + (n0 / N)))
output$ni_value <- renderText(ni)
texts <- c(
"The population size = ",
"Confidence level = ",
"The absolute precision = ",
"The estimated value of the variance of the studied characteristic = ",
"The estimated sample size = "
)
title <- "Sample size for finite populations"
dynamics <- c("pop_size_value", "conf_value", "prec_value", "var_value", "ni_value")
items <- c("Reference: Gómez Aguilar, Roberto. 1979. Introduction to Sampling.")
P1 <- generate_dynamic_lines(dynamics, texts)
report_f_html <- tags$div()
title_html <- tags$h3(title)
report_f_html <- tagAppendChild(report_f_html, title_html)
report_f_html <- tagAppendChild(report_f_html, P1)
return(report_f_html)
}
})
############ Start equations
output$equa <- renderUI({
# Depending on the type of population, define the corresponding equations and paragraphs
if (input$Type == "Infinite Population") {
equations <- c("$$n_0 = \\frac{S^2 z_{(\\alpha/2)}^2}{e^2}$$")
paragraphs <- c("Equation for calculating the sample size to estimate the mean of an infinite population:")
} else {
equations <- c("$$n = \\frac{N S^2 z_{(\\alpha/2)}^2}{N e^2 + S^2 z_{(\\alpha/2)}^2} = \\frac{n_0}{1 + \\frac{n_0}{N}}$$")
paragraphs <- c("Equation for calculating the sample size to estimate the mean of a finite population:")
}
# Definition of additional explanatory paragraphs
paragraphs2 <- c("Where:")
if (input$Type == "Infinite Population") {
paragraphs2 <- c(paragraphs2, "is the sample size to estimate the mean of an infinite population.")
} else {
paragraphs2 <- c(paragraphs2, "is the sample size to estimate the mean of an infinite population.",
"is the sample size to estimate the mean of a finite population.")
}
paragraphs2 <- c(paragraphs2,
"is the variance of the characteristic of interest.",
"is the z-score corresponding to the desired confidence level.",
"is the maximum permissible absolute error (or desired absolute precision)."
)
# Definition of additional explanatory equations
equations2 <- c("$$ $$")
if (input$Type == "Infinite Population") {
equations2 <- c(equations2, "$$n_0$$")
} else {
equations2 <- c(equations2, "$$n_0$$", "$$n$$")
}
equations2 <- c(equations2, "$$S^2$$", "$$z_{(\\alpha/2)}$$", "$$e$$")
if (input$Type == "Finite Population") {
equations2 <- c(equations2, "$$N$$")
paragraphs2 <- c(paragraphs2, "is the population size.")
}
title <- "Equation for Sample Size Calculation"
report_html <- tags$div()
P1 <- generate_text_with_equation(equations, paragraphs)
P2 <- generate_text_with_equation_1(equations2, paragraphs2)
report_f_html <- tags$div()
title_html <- tags$h3(title)
report_f_html <- tagAppendChild(report_f_html, title_html)
report_f_html <- tagAppendChild(report_f_html, P1)
report_f_html <- tagAppendChild(report_f_html, P2)
return(report_f_html)
})
############ Start additional information
output$inform <- renderUI({
if (input$Type == "Infinite Population") {
equations <- c(
"$$\\bar{y} = \\frac{1}{n} \\sum_{i=1}^{n} y_i$$",
"$$\\hat{V}(\\bar{y}) = \\frac{s^2}{n}$$"
)
} else {
equations <- c(
"$$\\bar{y} = \\frac{1}{n} \\sum_{i=1}^{n} y_i$$",
"$$\\hat{V}(\\bar{y}) = \\left(1 - \\frac{n}{N}\\right) \\frac{s^2}{n}$$"
)
}
paragraphs <- c(
"Estimator of the population mean:",
"Estimator of the variance of the sample mean:"
)
paragraphs2 <- c(
"Where:",
"is the sample mean",
"is the sample variance of the characteristic of interest",
"is the sample size"
)
equations2 <- c("$$ $$", "$$\\bar{y}$$", "$$S^2$$", "$$n$$")
if (input$Type == "Finite Population") {
equations2 <- c(equations2, "$$N$$")
paragraphs2 <- c(paragraphs2, "is the population size")
}
title <- if (input$Type == "Finite Population") {
"Simple random sampling with finite populations"
} else {
"Simple random sampling with infinite populations"
}
report_html <- tags$div()
P1 <- generate_text_with_equation(equations, paragraphs)
P2 <- generate_text_with_equation_1(equations2, paragraphs2)
report_f_html <- tags$div()
title_html <- tags$h3(title)
report_f_html <- tagAppendChild(report_f_html, title_html)
report_f_html <- tagAppendChild(report_f_html, P1)
report_f_html <- tagAppendChild(report_f_html, P2)
return(report_f_html)
})
################# Start example
output$example <- renderUI({
# Define the content of the example
example_title <- "Example"
if (input$Type == "Finite Population") {
example_description <- paste(
"A researcher wants to estimate the mean systolic blood pressure of adult Americans",
"with 95% confidence and an error no larger than 3 mm Hg. If the estimated variance",
"is 100, how many adult Americans should the researcher randomly sample to achieve",
"her estimation goal?"
)
example_title2 <- "Result:"
example_title3 <- "Sample size for infinite populations"
example_result <- c(
"The population size =",
"Confidence level =",
"The absolute precision =",
"The estimated value of the variance of the studied characteristic =",
"The estimated sample size ="
)
result_numbers <- c(300,95, 3, 100, 43)
table_html <- tags$table(
lapply(seq_along(example_result), function(i) {
result_html <- HTML(example_result[i])
text_html <- HTML(result_numbers[i])
tags$tr(
tags$td(result_html, style = "padding-right: 20px;"),
tags$td(text_html)
)
})
)
example_html <- tags$div(
tags$h3(example_title),
tags$p(HTML(example_description)),
tags$h3(example_title2),
tags$h3(example_title3),
table_html
)
return(example_html)
} else {
example_description <- paste(
"A researcher wants to estimate the mean systolic blood pressure of adult Americans",
"with 95% confidence and an error no larger than 3 mm Hg. If the estimated variance",
"is 100, how many adult Americans should the researcher randomly sample to achieve",
"her estimation goal?"
)
example_title2 <- "Result:"
example_title3 <- "Sample size for infinite populations"
example_result <- c(
"Confidence level =",
"The absolute precision =",
"The estimated value of the variance of the studied characteristic =",
"The estimated sample size ="
)
result_numbers <- c(95, 3, 100, 43)
table_html <- tags$table(
lapply(seq_along(example_result), function(i) {
result_html <- HTML(example_result[i])
text_html <- HTML(result_numbers[i])
tags$tr(
tags$td(result_html, style = "padding-right: 20px;"),
tags$td(text_html)
)
})
)
example_html <- tags$div(
tags$h3(example_title),
tags$p(HTML(example_description)),
tags$h3(example_title2),
tags$h3(example_title3),
table_html
)
return(example_html)
}
})
}
shinyApp(ui = ui, server = server)
runApp('app1/plan/plan2/tamaño-binomial1.R')
runApp('app1/plan/plan2/tamaño-binomial-I.R')
create_package("PhytosanitaryCalculator")
package.skeleton("PhytosanitaryCalculator")
library(shiny); runApp('app1/plan/plan2/tamaño-binomial.R')
runApp('app1/plan/plan2/tamaño-binomial-I.R')
install.packages("devtools")
devtools::document()
install.packages("roxygen2")
library(roxygen2)
runApp('app1/plan/plan2/tamaño-binomial.R')
runApp('app1/plan/plan2/tamaño-binomial1.R')
runApp('app1/plan/plan2/tamaño-binomial.R')
runApp('app1/plan/plan2/tamaño-binomial1.R')
runApp('app1/plan/plan2/tamaño-binomial.R')
runApp('app1/plan/plan2/tamaño-binomial.R')
runApp('app1/plan/plan2/tamaño-binomial.R')
#' @title Phytosanitary Calculator
#' @description A Shiny application for calculating phytosanitary inspection plans based on risks.
#' @details The application provides sampling plans with minimal sample sizes that keep both producer and importer risks below user-defined levels.
#' @param input Input object containing user inputs for sampling type, acceptable sanity level, limit sanity level, producer's risk, and importer's risk.
#' @param output Output object for displaying the sampling plan summary, operating characteristic curve, and characteristics summary.
#' @return A Shiny app object.
#' @examples
#' if(interactive()) {
#'   run_app()
#' }
#' @import shiny
#' @import AcceptanceSampling
#' @export
run_app <- function() {
library(shiny)
library(AcceptanceSampling)
# Define UI
ui <- fluidPage(
titlePanel("Phytosanitary Calculator for Inspection Plans Based on Risks"),
sidebarLayout(
sidebarPanel(
selectInput(
"sampling_type",
label = "Sampling Type",
choices = c("Hypergeometric", "Binomial", "Poisson")
),
conditionalPanel(
condition = 'input.sampling_type === "Hypergeometric"',
numericInput(
inputId = "lot_size",
label = "Lot Size:",
value = 100,
min = 1
)
),
numericInput(
inputId = "acceptable_sanity_level",
label = "Acceptable Sanity Level:",
value = 0.05,
min = 0,
max = 1,
step = 0.001
),
numericInput(
inputId = "limit_sanity_level",
label = "Limit Sanity Level:",
value = 0.24,
min = 0,
max = 1,
step = 0.001
),
numericInput(
inputId = "producer_risk",
label = "Producer's Risk:",
value = 0.05,
min = 0,
max = 1,
step = 0.001
),
numericInput(
inputId = "importer_risk",
label = "Importer's Risk:",
value = 0.15,
min = 0,
max = 1,
step = 0.001
)
),
mainPanel(
tabsetPanel(
tabPanel("Sampling Plan", verbatimTextOutput("sampling_plan_summary")),
tabPanel("Operating Characteristic Curve", plotOutput("oc_curve")),
tabPanel("Characteristics", verbatimTextOutput("characteristics_summary"))
)
)
)
)
# Define server logic
server <- function(input, output) {
output$sampling_plan_summary <- renderPrint({
plan_summary <- switch(input$sampling_type,
"Binomial" = {
plan <- find.plan(PRP = c(input$acceptable_sanity_level, 1 - input$producer_risk),
CRP = c(input$limit_sanity_level, input$importer_risk), type = "b")
summary(OC2c(plan$n, plan$c), full = TRUE)
},
"Poisson" = {
plan <- find.plan(PRP = c(input$acceptable_sanity_level, 1 - input$producer_risk),
CRP = c(input$limit_sanity_level, input$importer_risk), type = "p")
summary(OC2c(plan$n, plan$c), full = TRUE)
},
"Hypergeometric" = {
plan <- find.plan(N = input$lot_size,
PRP = c(input$acceptable_sanity_level, 1 - input$producer_risk),
CRP = c(input$limit_sanity_level, input$importer_risk), type = "h")
summary(OC2c(n = plan$n, c = plan$c, N = input$lot_size, type = "hypergeom"), full = TRUE)
}
)
plan_summary
})
output$oc_curve <- renderPlot({
plan_curve <- switch(input$sampling_type,
"Binomial" = {
plan <- find.plan(PRP = c(input$acceptable_sanity_level, 1 - input$producer_risk),
CRP = c(input$limit_sanity_level, input$importer_risk), type = "b")
curve <- OC2c(plan$n, plan$c)
},
"Poisson" = {
plan <- find.plan(PRP = c(input$acceptable_sanity_level, 1 - input$producer_risk),
CRP = c(input$limit_sanity_level, input$importer_risk), type = "p")
curve <- OC2c(plan$n, plan$c)
},
"Hypergeometric" = {
plan <- find.plan(N = input$lot_size,
PRP = c(input$acceptable_sanity_level, 1 - input$producer_risk),
CRP = c(input$limit_sanity_level, input$importer_risk), type = "h")
curve <- OC2c(n = plan$n, c = plan$c, N = input$lot_size, type = "hypergeom")
}
)
plot(curve, type = "l", lwd = 2, xlim = c(0, 0.4), bg = "gray", main = "Operating Characteristic Curve")
grid(lty = "solid")
abline(h = 1 - input$producer_risk, col = "red", lwd = 1)
abline(h = input$importer_risk, col = "red", lwd = 1)
abline(v = input$acceptable_sanity_level, col = "blue", lwd = 1)
abline(v = input$limit_sanity_level, col = "blue", lwd = 1)
})
output$characteristics_summary <- renderPrint({
characteristics_summary <- switch(input$sampling_type,
"Binomial" = {
plan <- find.plan(PRP = c(input$acceptable_sanity_level, 1 - input$producer_risk),
CRP = c(input$limit_sanity_level, input$importer_risk), type = "b")
assess(OC2c(plan$n, plan$c), PRP = c(input$acceptable_sanity_level, input$producer_risk),
CRP = c(input$limit_sanity_level, input$importer_risk))
},
"Poisson" = {
plan <- find.plan(PRP = c(input$acceptable_sanity_level, 1 - input$producer_risk),
CRP = c(input$limit_sanity_level, input$importer_risk), type = "p")
assess(OC2c(plan$n, plan$c), PRP = c(input$acceptable_sanity_level, input$producer_risk),
CRP = c(input$limit_sanity_level, input$importer_risk))
},
"Hypergeometric" = {
plan <- find.plan(N = input$lot_size,
PRP = c(input$acceptable_sanity_level, 1 - input$producer_risk),
CRP = c(input$limit_sanity_level, input$importer_risk), type = "h")
assess(OC2c(n = plan$n, c = plan$c, N = input$lot_size, type = "hypergeom"),
PRP = c(input$acceptable_sanity_level, input$producer_risk),
CRP = c(input$limit_sanity_level, input$importer_risk))
}
)
})
}
shinyApp(ui = ui, server = server)
}
# Carga el paquete
library(PhytosanitaryCalculator)
# Ejecuta la aplicación Shiny
run_app()
library(devtools)
check()
setwd("C:/Users/grami/Documents/PhytosanitaryCalculator")
check()
check()
setwd("C:/Users/grami/Documents/PhytosanitaryCalculator")
devtools::document()
check()
devtools::check()
devtools::check()
devtools::document();devtools::check()
devtools::document();devtools::check()
rm R/sysdata.rda
rm R/sysdata.rda
devtools::document()
devtools::check()
devtools::build()
# Verificar el directorio de trabajo actual
current_dir <- getwd()
print(paste("Directorio de trabajo actual:", current_dir))
# Listar los archivos en el directorio de trabajo actual
files <- list.files()
print("Archivos en el directorio de trabajo actual:")
print(files)
# Buscar el archivo .tar.gz en todos los subdirectorios del directorio actual
tar_files <- dir(pattern = "*.tar.gz", recursive = TRUE)
print("Archivos .tar.gz encontrados:")
print(tar_files)
devtools::document()
devtools::check()
devtools::build()
# Reemplaza "ruta/al/archivo/PhytosanitaryCalculator_1.0.tar.gz" con la ruta real a tu archivo .tar.gz
install.packages("C:/Users/grami/Documents/PhytosanitaryCalculator_1.0.tar.gz", repos = NULL, type = "source")
